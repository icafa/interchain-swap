// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interquery/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgSendQueryOsmosisPrice struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChannelId       string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PoolId          uint64 `protobuf:"varint,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	BaseAssetDenom  string `protobuf:"bytes,4,opt,name=base_asset_denom,json=baseAssetDenom,proto3" json:"base_asset_denom,omitempty" yaml:"base_asset_denom"`
	QuoteAssetDenom string `protobuf:"bytes,5,opt,name=quote_asset_denom,json=quoteAssetDenom,proto3" json:"quote_asset_denom,omitempty" yaml:"quote_asset_denom"`
}

func (m *MsgSendQueryOsmosisPrice) Reset()         { *m = MsgSendQueryOsmosisPrice{} }
func (m *MsgSendQueryOsmosisPrice) String() string { return proto.CompactTextString(m) }
func (*MsgSendQueryOsmosisPrice) ProtoMessage()    {}
func (*MsgSendQueryOsmosisPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc451d820caa77b, []int{0}
}
func (m *MsgSendQueryOsmosisPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendQueryOsmosisPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendQueryOsmosisPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendQueryOsmosisPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendQueryOsmosisPrice.Merge(m, src)
}
func (m *MsgSendQueryOsmosisPrice) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendQueryOsmosisPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendQueryOsmosisPrice.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendQueryOsmosisPrice proto.InternalMessageInfo

func (m *MsgSendQueryOsmosisPrice) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSendQueryOsmosisPrice) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *MsgSendQueryOsmosisPrice) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgSendQueryOsmosisPrice) GetBaseAssetDenom() string {
	if m != nil {
		return m.BaseAssetDenom
	}
	return ""
}

func (m *MsgSendQueryOsmosisPrice) GetQuoteAssetDenom() string {
	if m != nil {
		return m.QuoteAssetDenom
	}
	return ""
}

type MsgSendQueryOsmosisPriceResponse struct {
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *MsgSendQueryOsmosisPriceResponse) Reset()         { *m = MsgSendQueryOsmosisPriceResponse{} }
func (m *MsgSendQueryOsmosisPriceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendQueryOsmosisPriceResponse) ProtoMessage()    {}
func (*MsgSendQueryOsmosisPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc451d820caa77b, []int{1}
}
func (m *MsgSendQueryOsmosisPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendQueryOsmosisPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendQueryOsmosisPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendQueryOsmosisPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendQueryOsmosisPriceResponse.Merge(m, src)
}
func (m *MsgSendQueryOsmosisPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendQueryOsmosisPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendQueryOsmosisPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendQueryOsmosisPriceResponse proto.InternalMessageInfo

func (m *MsgSendQueryOsmosisPriceResponse) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

type SwapAmountInRoute struct {
	PoolId        uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	TokenOutDenom string `protobuf:"bytes,2,opt,name=token_out_denom,json=tokenOutDenom,proto3" json:"token_out_denom,omitempty" yaml:"token_out_denom"`
}

func (m *SwapAmountInRoute) Reset()         { *m = SwapAmountInRoute{} }
func (m *SwapAmountInRoute) String() string { return proto.CompactTextString(m) }
func (*SwapAmountInRoute) ProtoMessage()    {}
func (*SwapAmountInRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc451d820caa77b, []int{2}
}
func (m *SwapAmountInRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapAmountInRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapAmountInRoute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapAmountInRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapAmountInRoute.Merge(m, src)
}
func (m *SwapAmountInRoute) XXX_Size() int {
	return m.Size()
}
func (m *SwapAmountInRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapAmountInRoute.DiscardUnknown(m)
}

var xxx_messageInfo_SwapAmountInRoute proto.InternalMessageInfo

func (m *SwapAmountInRoute) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *SwapAmountInRoute) GetTokenOutDenom() string {
	if m != nil {
		return m.TokenOutDenom
	}
	return ""
}

type MsgSendOsmosisSwap struct {
	Sender            string                                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	ConnectionId      string                                 `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	Routes            []SwapAmountInRoute                    `protobuf:"bytes,3,rep,name=routes,proto3" json:"routes"`
	TokenIn           types.Coin                             `protobuf:"bytes,4,opt,name=token_in,json=tokenIn,proto3" json:"token_in" yaml:"token_in"`
	TokenOutMinAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=token_out_min_amount,json=tokenOutMinAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"token_out_min_amount" yaml:"token_out_min_amount"`
}

func (m *MsgSendOsmosisSwap) Reset()         { *m = MsgSendOsmosisSwap{} }
func (m *MsgSendOsmosisSwap) String() string { return proto.CompactTextString(m) }
func (*MsgSendOsmosisSwap) ProtoMessage()    {}
func (*MsgSendOsmosisSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc451d820caa77b, []int{3}
}
func (m *MsgSendOsmosisSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendOsmosisSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendOsmosisSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendOsmosisSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendOsmosisSwap.Merge(m, src)
}
func (m *MsgSendOsmosisSwap) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendOsmosisSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendOsmosisSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendOsmosisSwap proto.InternalMessageInfo

func (m *MsgSendOsmosisSwap) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSendOsmosisSwap) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *MsgSendOsmosisSwap) GetRoutes() []SwapAmountInRoute {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *MsgSendOsmosisSwap) GetTokenIn() types.Coin {
	if m != nil {
		return m.TokenIn
	}
	return types.Coin{}
}

type OsmosisMsgSwapExactAmountIn struct {
	Sender            string                                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	Routes            []SwapAmountInRoute                    `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes"`
	TokenIn           types.Coin                             `protobuf:"bytes,3,opt,name=token_in,json=tokenIn,proto3" json:"token_in" yaml:"token_in"`
	TokenOutMinAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=token_out_min_amount,json=tokenOutMinAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"token_out_min_amount" yaml:"token_out_min_amount"`
}

func (m *OsmosisMsgSwapExactAmountIn) Reset()         { *m = OsmosisMsgSwapExactAmountIn{} }
func (m *OsmosisMsgSwapExactAmountIn) String() string { return proto.CompactTextString(m) }
func (*OsmosisMsgSwapExactAmountIn) ProtoMessage()    {}
func (*OsmosisMsgSwapExactAmountIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc451d820caa77b, []int{4}
}
func (m *OsmosisMsgSwapExactAmountIn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OsmosisMsgSwapExactAmountIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OsmosisMsgSwapExactAmountIn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OsmosisMsgSwapExactAmountIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OsmosisMsgSwapExactAmountIn.Merge(m, src)
}
func (m *OsmosisMsgSwapExactAmountIn) XXX_Size() int {
	return m.Size()
}
func (m *OsmosisMsgSwapExactAmountIn) XXX_DiscardUnknown() {
	xxx_messageInfo_OsmosisMsgSwapExactAmountIn.DiscardUnknown(m)
}

var xxx_messageInfo_OsmosisMsgSwapExactAmountIn proto.InternalMessageInfo

func (m *OsmosisMsgSwapExactAmountIn) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *OsmosisMsgSwapExactAmountIn) GetRoutes() []SwapAmountInRoute {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *OsmosisMsgSwapExactAmountIn) GetTokenIn() types.Coin {
	if m != nil {
		return m.TokenIn
	}
	return types.Coin{}
}

type MsgSendOsmosisSwapResponse struct {
	TokenOutAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=token_out_amount,json=tokenOutAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"token_out_amount" yaml:"token_out_amount"`
}

func (m *MsgSendOsmosisSwapResponse) Reset()         { *m = MsgSendOsmosisSwapResponse{} }
func (m *MsgSendOsmosisSwapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendOsmosisSwapResponse) ProtoMessage()    {}
func (*MsgSendOsmosisSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc451d820caa77b, []int{5}
}
func (m *MsgSendOsmosisSwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendOsmosisSwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendOsmosisSwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendOsmosisSwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendOsmosisSwapResponse.Merge(m, src)
}
func (m *MsgSendOsmosisSwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendOsmosisSwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendOsmosisSwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendOsmosisSwapResponse proto.InternalMessageInfo

type MsgRegisterICA struct {
	// owner is the address of the interchain account owner.
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// connection_id is the connection id string (i.e. channel-5).
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// version is the application version string. For example, this could be an
	// ICS27 encoded metadata type or an ICS29 encoded metadata type with a nested
	// application version.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *MsgRegisterICA) Reset()         { *m = MsgRegisterICA{} }
func (m *MsgRegisterICA) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterICA) ProtoMessage()    {}
func (*MsgRegisterICA) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc451d820caa77b, []int{6}
}
func (m *MsgRegisterICA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterICA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterICA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterICA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterICA.Merge(m, src)
}
func (m *MsgRegisterICA) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterICA) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterICA.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterICA proto.InternalMessageInfo

func (m *MsgRegisterICA) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRegisterICA) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *MsgRegisterICA) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type MsgRegisterICAResponse struct {
}

func (m *MsgRegisterICAResponse) Reset()         { *m = MsgRegisterICAResponse{} }
func (m *MsgRegisterICAResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterICAResponse) ProtoMessage()    {}
func (*MsgRegisterICAResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc451d820caa77b, []int{7}
}
func (m *MsgRegisterICAResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterICAResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterICAResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterICAResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterICAResponse.Merge(m, src)
}
func (m *MsgRegisterICAResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterICAResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterICAResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterICAResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSendQueryOsmosisPrice)(nil), "junkai121.interchainswap.interquery.MsgSendQueryOsmosisPrice")
	proto.RegisterType((*MsgSendQueryOsmosisPriceResponse)(nil), "junkai121.interchainswap.interquery.MsgSendQueryOsmosisPriceResponse")
	proto.RegisterType((*SwapAmountInRoute)(nil), "junkai121.interchainswap.interquery.SwapAmountInRoute")
	proto.RegisterType((*MsgSendOsmosisSwap)(nil), "junkai121.interchainswap.interquery.MsgSendOsmosisSwap")
	proto.RegisterType((*OsmosisMsgSwapExactAmountIn)(nil), "junkai121.interchainswap.interquery.OsmosisMsgSwapExactAmountIn")
	proto.RegisterType((*MsgSendOsmosisSwapResponse)(nil), "junkai121.interchainswap.interquery.MsgSendOsmosisSwapResponse")
	proto.RegisterType((*MsgRegisterICA)(nil), "junkai121.interchainswap.interquery.MsgRegisterICA")
	proto.RegisterType((*MsgRegisterICAResponse)(nil), "junkai121.interchainswap.interquery.MsgRegisterICAResponse")
}

func init() { proto.RegisterFile("interquery/tx.proto", fileDescriptor_0cc451d820caa77b) }

var fileDescriptor_0cc451d820caa77b = []byte{
	// 802 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcd, 0x6e, 0xeb, 0x44,
	0x14, 0x8e, 0x93, 0x90, 0xdc, 0x4e, 0x69, 0x72, 0x63, 0x2e, 0xb7, 0xc6, 0x85, 0x38, 0xf2, 0x95,
	0x50, 0x01, 0x5d, 0x5b, 0xc9, 0x95, 0xa8, 0x04, 0x02, 0x54, 0x97, 0x4a, 0x78, 0x11, 0x95, 0xba,
	0xac, 0xd8, 0x44, 0x8e, 0x3d, 0x72, 0x87, 0x36, 0x33, 0xae, 0x67, 0xdc, 0x9f, 0x0d, 0x6c, 0xd8,
	0x20, 0x36, 0xf4, 0x01, 0x78, 0x0b, 0x1e, 0xa2, 0xcb, 0x2e, 0x11, 0x0b, 0x0b, 0xb5, 0x6b, 0x36,
	0x79, 0x02, 0x34, 0xf6, 0x38, 0x76, 0x53, 0x0a, 0x69, 0x51, 0xef, 0x2a, 0x9e, 0xf3, 0xf3, 0x9d,
	0x73, 0xbe, 0xef, 0xcc, 0x28, 0xe0, 0x2d, 0x84, 0x19, 0x8c, 0x8e, 0x62, 0x18, 0x9d, 0x99, 0xec,
	0xd4, 0x08, 0x23, 0xc2, 0x88, 0xfc, 0xe2, 0xbb, 0x18, 0x1f, 0xb8, 0xa8, 0x3f, 0xe8, 0x1b, 0xa9,
	0xdb, 0xdb, 0x77, 0x11, 0xa6, 0x27, 0x6e, 0x68, 0x14, 0xd1, 0xea, 0xb3, 0x80, 0x04, 0x24, 0x8d,
	0x37, 0xf9, 0x57, 0x96, 0xaa, 0x76, 0x3d, 0x42, 0x27, 0x84, 0x9a, 0x63, 0x97, 0x42, 0xf3, 0xb8,
	0x3f, 0x86, 0xcc, 0xed, 0x9b, 0x1e, 0x41, 0x58, 0xf8, 0x3f, 0x2c, 0xfb, 0xb3, 0xb2, 0x79, 0x54,
	0xe8, 0x06, 0x08, 0xbb, 0x0c, 0x11, 0x11, 0xab, 0x9f, 0x57, 0x81, 0x32, 0xa4, 0xc1, 0x1e, 0xc4,
	0xfe, 0x2e, 0x8f, 0xdc, 0xe1, 0x99, 0x88, 0x7e, 0x1d, 0x21, 0x0f, 0xca, 0x0a, 0x68, 0x7a, 0x11,
	0x74, 0x19, 0x89, 0x14, 0xa9, 0x27, 0xad, 0x2f, 0x39, 0xf9, 0x51, 0x7e, 0x0f, 0x00, 0x6f, 0xdf,
	0xc5, 0x18, 0x1e, 0x8e, 0x90, 0xaf, 0x54, 0x53, 0xe7, 0x92, 0xb0, 0xd8, 0xbe, 0xfc, 0x11, 0x68,
	0x86, 0x84, 0xa4, 0xbe, 0x5a, 0x4f, 0x5a, 0xaf, 0x5b, 0xf2, 0x34, 0xd1, 0x5a, 0x67, 0xee, 0xe4,
	0xf0, 0x13, 0x5d, 0x38, 0x74, 0xa7, 0xc1, 0xbf, 0x6c, 0x5f, 0xde, 0x06, 0x4f, 0x79, 0xa7, 0x23,
	0x97, 0x52, 0xc8, 0x46, 0x3e, 0xc4, 0x64, 0xa2, 0xd4, 0x39, 0xa2, 0xb5, 0x36, 0x4d, 0xb4, 0xd5,
	0x2c, 0x6b, 0x3e, 0x42, 0x77, 0x5a, 0xdc, 0xb4, 0xc9, 0x2d, 0x5f, 0x72, 0x83, 0xfc, 0x15, 0xe8,
	0x1c, 0xc5, 0x84, 0xdd, 0xc4, 0x79, 0x23, 0xc5, 0x79, 0x77, 0x9a, 0x68, 0x4a, 0x86, 0x73, 0x2b,
	0x44, 0x77, 0xda, 0xa9, 0xad, 0x40, 0xd2, 0x3f, 0x07, 0xbd, 0xbb, 0x28, 0x71, 0x20, 0x0d, 0x09,
	0xa6, 0x50, 0x56, 0xc1, 0x13, 0x0a, 0x8f, 0x62, 0x88, 0x3d, 0x98, 0x72, 0x53, 0x77, 0x66, 0x67,
	0xfd, 0x47, 0x09, 0x74, 0xf6, 0x4e, 0xdc, 0x70, 0x73, 0x42, 0x62, 0xcc, 0x6c, 0xec, 0x90, 0x98,
	0xc1, 0x32, 0x27, 0xd2, 0x7f, 0x72, 0x62, 0x81, 0x36, 0x23, 0x07, 0x10, 0x8f, 0x48, 0x9c, 0x8f,
	0x92, 0x92, 0x6c, 0xa9, 0xd3, 0x44, 0x7b, 0x9e, 0x25, 0xcd, 0x05, 0xe8, 0xce, 0x4a, 0x6a, 0xd9,
	0x89, 0xc5, 0x18, 0x3f, 0xd5, 0x80, 0x2c, 0xe6, 0x10, 0x23, 0xf0, 0xa6, 0xe4, 0x0f, 0x40, 0x83,
	0x42, 0xec, 0x43, 0xa1, 0xa9, 0xd5, 0x99, 0x26, 0xda, 0x4a, 0x86, 0x98, 0xd9, 0x75, 0x47, 0x04,
	0xc8, 0x2f, 0xc0, 0x8a, 0x47, 0x30, 0x86, 0x1e, 0x5f, 0x98, 0x42, 0xe8, 0x37, 0x0b, 0xa3, 0xed,
	0xcb, 0xdf, 0x80, 0x46, 0xc4, 0x07, 0xa4, 0x4a, 0xad, 0x57, 0x5b, 0x5f, 0x1e, 0x7c, 0x6c, 0x2c,
	0xb0, 0xd9, 0xc6, 0x2d, 0x7e, 0xac, 0xfa, 0x45, 0xa2, 0x55, 0x1c, 0x81, 0x25, 0x0f, 0xc1, 0x93,
	0x6c, 0x3e, 0x84, 0xd3, 0x65, 0x58, 0x1e, 0xbc, 0x63, 0x64, 0x6b, 0x6d, 0x70, 0xdd, 0x0d, 0xb1,
	0xd0, 0xc6, 0x16, 0x41, 0xd8, 0x5a, 0xe5, 0xa9, 0xd3, 0x44, 0x6b, 0x97, 0x89, 0x41, 0x58, 0x77,
	0x9a, 0xe9, 0xa7, 0x8d, 0xe5, 0xef, 0xc1, 0xb3, 0x82, 0xae, 0x09, 0xc2, 0x23, 0x37, 0xad, 0x2d,
	0xf6, 0x63, 0xc8, 0xf3, 0xff, 0x48, 0xb4, 0xf7, 0x03, 0xc4, 0xf6, 0xe3, 0xb1, 0xe1, 0x91, 0x89,
	0x29, 0xee, 0x50, 0xf6, 0xf3, 0x92, 0xfa, 0x07, 0x26, 0x3b, 0x0b, 0x21, 0x35, 0x6c, 0xcc, 0xa6,
	0x89, 0xb6, 0x36, 0x2f, 0x41, 0x81, 0xa9, 0x3b, 0x9d, 0x5c, 0x87, 0x21, 0xc2, 0xd9, 0x8c, 0xfa,
	0x5f, 0x55, 0xb0, 0x26, 0x44, 0xe0, 0x92, 0x9c, 0xb8, 0xe1, 0xf6, 0xa9, 0xeb, 0xb1, 0x9c, 0x81,
	0xfb, 0x88, 0x52, 0xf0, 0x5d, 0x7d, 0x24, 0xbe, 0x6b, 0x8f, 0xc7, 0x77, 0xfd, 0x35, 0xf1, 0x7d,
	0x2e, 0x01, 0xf5, 0xf6, 0xee, 0xcf, 0x6e, 0x2f, 0x05, 0x4f, 0x0b, 0x28, 0xd1, 0x5a, 0x46, 0xbc,
	0x7d, 0xef, 0xd6, 0x56, 0xe7, 0x5b, 0xcb, 0xdb, 0x6a, 0xe5, 0x6d, 0x89, 0x9e, 0x10, 0x68, 0x0d,
	0x69, 0xe0, 0xc0, 0x00, 0x51, 0x06, 0x23, 0x7b, 0x6b, 0xf3, 0x5f, 0xde, 0xd7, 0x85, 0x6e, 0x9e,
	0x02, 0x9a, 0xc7, 0x30, 0xa2, 0x88, 0x64, 0x92, 0x2d, 0x39, 0xf9, 0x51, 0x57, 0xc0, 0xf3, 0x9b,
	0xa5, 0xf2, 0xc9, 0x07, 0xbf, 0xd5, 0x40, 0x6d, 0x48, 0x03, 0xf9, 0x57, 0x09, 0xbc, 0xfd, 0xcf,
	0x8f, 0xfe, 0x67, 0x0b, 0xed, 0xd3, 0x5d, 0x0f, 0xa4, 0xba, 0xfd, 0xbf, 0xd2, 0x67, 0x0a, 0xfd,
	0x2c, 0x81, 0xf6, 0xfc, 0xcb, 0xb5, 0x71, 0x1f, 0xe8, 0x52, 0xa2, 0xfa, 0xc5, 0x03, 0x13, 0x67,
	0xdd, 0xfc, 0x00, 0x96, 0xcb, 0xba, 0xbd, 0x5a, 0x14, 0xaf, 0x94, 0xa4, 0x7e, 0xfa, 0x80, 0xa4,
	0xbc, 0x01, 0x6b, 0xf7, 0xe2, 0xaa, 0x2b, 0x5d, 0x5e, 0x75, 0xa5, 0x3f, 0xaf, 0xba, 0xd2, 0x2f,
	0xd7, 0xdd, 0xca, 0xe5, 0x75, 0xb7, 0xf2, 0xfb, 0x75, 0xb7, 0xf2, 0xed, 0x46, 0x69, 0x51, 0x67,
	0x05, 0xcc, 0xa2, 0xc0, 0x4b, 0x5e, 0xc1, 0x3c, 0x35, 0xcb, 0xff, 0x41, 0xf8, 0xf6, 0x8e, 0x1b,
	0xe9, 0x1f, 0x80, 0x57, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x30, 0x64, 0xf8, 0x9e, 0x08,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	SendQueryOsmosisPrice(ctx context.Context, in *MsgSendQueryOsmosisPrice, opts ...grpc.CallOption) (*MsgSendQueryOsmosisPriceResponse, error)
	SendOsmosisSwap(ctx context.Context, in *MsgSendOsmosisSwap, opts ...grpc.CallOption) (*MsgSendOsmosisSwapResponse, error)
	RegisterICA(ctx context.Context, in *MsgRegisterICA, opts ...grpc.CallOption) (*MsgRegisterICAResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SendQueryOsmosisPrice(ctx context.Context, in *MsgSendQueryOsmosisPrice, opts ...grpc.CallOption) (*MsgSendQueryOsmosisPriceResponse, error) {
	out := new(MsgSendQueryOsmosisPriceResponse)
	err := c.cc.Invoke(ctx, "/junkai121.interchainswap.interquery.Msg/SendQueryOsmosisPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendOsmosisSwap(ctx context.Context, in *MsgSendOsmosisSwap, opts ...grpc.CallOption) (*MsgSendOsmosisSwapResponse, error) {
	out := new(MsgSendOsmosisSwapResponse)
	err := c.cc.Invoke(ctx, "/junkai121.interchainswap.interquery.Msg/SendOsmosisSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterICA(ctx context.Context, in *MsgRegisterICA, opts ...grpc.CallOption) (*MsgRegisterICAResponse, error) {
	out := new(MsgRegisterICAResponse)
	err := c.cc.Invoke(ctx, "/junkai121.interchainswap.interquery.Msg/RegisterICA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	SendQueryOsmosisPrice(context.Context, *MsgSendQueryOsmosisPrice) (*MsgSendQueryOsmosisPriceResponse, error)
	SendOsmosisSwap(context.Context, *MsgSendOsmosisSwap) (*MsgSendOsmosisSwapResponse, error)
	RegisterICA(context.Context, *MsgRegisterICA) (*MsgRegisterICAResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SendQueryOsmosisPrice(ctx context.Context, req *MsgSendQueryOsmosisPrice) (*MsgSendQueryOsmosisPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendQueryOsmosisPrice not implemented")
}
func (*UnimplementedMsgServer) SendOsmosisSwap(ctx context.Context, req *MsgSendOsmosisSwap) (*MsgSendOsmosisSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOsmosisSwap not implemented")
}
func (*UnimplementedMsgServer) RegisterICA(ctx context.Context, req *MsgRegisterICA) (*MsgRegisterICAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterICA not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SendQueryOsmosisPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendQueryOsmosisPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendQueryOsmosisPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junkai121.interchainswap.interquery.Msg/SendQueryOsmosisPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendQueryOsmosisPrice(ctx, req.(*MsgSendQueryOsmosisPrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendOsmosisSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendOsmosisSwap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendOsmosisSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junkai121.interchainswap.interquery.Msg/SendOsmosisSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendOsmosisSwap(ctx, req.(*MsgSendOsmosisSwap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterICA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterICA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterICA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junkai121.interchainswap.interquery.Msg/RegisterICA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterICA(ctx, req.(*MsgRegisterICA))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "junkai121.interchainswap.interquery.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendQueryOsmosisPrice",
			Handler:    _Msg_SendQueryOsmosisPrice_Handler,
		},
		{
			MethodName: "SendOsmosisSwap",
			Handler:    _Msg_SendOsmosisSwap_Handler,
		},
		{
			MethodName: "RegisterICA",
			Handler:    _Msg_RegisterICA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interquery/tx.proto",
}

func (m *MsgSendQueryOsmosisPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendQueryOsmosisPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendQueryOsmosisPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QuoteAssetDenom) > 0 {
		i -= len(m.QuoteAssetDenom)
		copy(dAtA[i:], m.QuoteAssetDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.QuoteAssetDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BaseAssetDenom) > 0 {
		i -= len(m.BaseAssetDenom)
		copy(dAtA[i:], m.BaseAssetDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BaseAssetDenom)))
		i--
		dAtA[i] = 0x22
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendQueryOsmosisPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendQueryOsmosisPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendQueryOsmosisPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SwapAmountInRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapAmountInRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapAmountInRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenOutDenom) > 0 {
		i -= len(m.TokenOutDenom)
		copy(dAtA[i:], m.TokenOutDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenOutDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendOsmosisSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendOsmosisSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendOsmosisSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TokenOutMinAmount.Size()
		i -= size
		if _, err := m.TokenOutMinAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.TokenIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OsmosisMsgSwapExactAmountIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OsmosisMsgSwapExactAmountIn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OsmosisMsgSwapExactAmountIn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TokenOutMinAmount.Size()
		i -= size
		if _, err := m.TokenOutMinAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.TokenIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendOsmosisSwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendOsmosisSwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendOsmosisSwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TokenOutAmount.Size()
		i -= size
		if _, err := m.TokenOutAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgRegisterICA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterICA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterICA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterICAResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterICAResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterICAResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSendQueryOsmosisPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	l = len(m.BaseAssetDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.QuoteAssetDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSendQueryOsmosisPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovTx(uint64(m.Sequence))
	}
	return n
}

func (m *SwapAmountInRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	l = len(m.TokenOutDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSendOsmosisSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = m.TokenIn.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.TokenOutMinAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *OsmosisMsgSwapExactAmountIn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = m.TokenIn.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.TokenOutMinAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSendOsmosisSwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TokenOutAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRegisterICA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterICAResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSendQueryOsmosisPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendQueryOsmosisPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendQueryOsmosisPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAssetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseAssetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteAssetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteAssetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendQueryOsmosisPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendQueryOsmosisPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendQueryOsmosisPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapAmountInRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapAmountInRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapAmountInRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOutDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenOutDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendOsmosisSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendOsmosisSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendOsmosisSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, SwapAmountInRoute{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOutMinAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenOutMinAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OsmosisMsgSwapExactAmountIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OsmosisMsgSwapExactAmountIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OsmosisMsgSwapExactAmountIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, SwapAmountInRoute{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOutMinAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenOutMinAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendOsmosisSwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendOsmosisSwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendOsmosisSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOutAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenOutAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterICA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterICA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterICA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterICAResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterICAResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterICAResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
